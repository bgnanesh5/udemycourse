Nginx:
=====
- What is nginx
- Current & Desired Architecture
- Layer 4 and Layer 7 Proxying in nginx
- Ex:
	. Nginx as a Web Server, Layer 7 and Layer 4 Proxy
	. Enable HTTPS,TLS 1.3 & HTTP/2 on Nginx

2. What is Nginx:
=================
- Web Server
	. Serves web content
- Proxy
	. Load Balancing
	. Backend Routing
	. Caching

3. Current Architecture:
======================

PC1 <---GET/employees or JSON{}----------->  Nginx
				             HTTPS:443 <-----> http:3002 <------> db:5432
PC2 <---GET/employees or JSON{}----------->  h/2

				Frontend -- Nginx -- Backend			

4. Layer 4 and Layer 7 proxying in Nginx:
=========================================
- Nginx can operate in layer 7 (http) or layer 4(tcp)
- Using stream context it becomes layer 4 proxy
- Using http context it becomes layer 7 proxy


5. Working with Nginx - What will we do?
========================================
Ex:
- install nginx (mac)
- nginx as a Webserver
- nginx as a layer 7 prixy
  . proxy to 4 backend NodeJS services (docker)
  . Split load to multiple backends (aap1/app2)
  . Block certain requests (/admin)
- nginx as a layer 4 proxy
- enable HTTPS on nginx (lets encrypt)
- enable TLS 1.3 on nginx
- enable HTTP/2 on nginx

6. Installing Nginx:
====================
    1 sudo apt update
    2  sudo apt install nginx
    3  sudo systemctl status nginx
    4  sudo ufw allow 'Nginx Full'
    5  sudo ufw status
    6  sudo ufw allow 22/tcp
    7  sudo ufw allow Nginx Full
    8  sudo ufw allow 'Nginx Full'
    9  sudo ufw enable
   10  sudo ufw status

7. Nginx as a Web Server:
=========================

vi /etc/nginx/nginx.conf  

http {
	server {
	   listen 8080;
	   root /users/nginxcourse;
	   
	   location /images {
			root /users/mahesh;
			}

	   location ~ .jpg$ {
			return 403;
			}
		}
	server {
	    listen 8088;
	    location / {
			proxy_pass http://localhost:8080/;
			}
	    location / img {
			proxy_pass http://localhost:8080/;
			}
		}
	}

events { }


$ nginx -s reload


8. Nginx as a Layer 7 Proxy:
============================

docker run -p 2222:9999 -e PPID=2222 -d nodeapp

vi /etc/nginx/nginx.cfg

http {

	upstream allbackend {
		#ip_hash;
		server 127.0.0.1:2222;
		server 127.0.0.1:3333;
		server 127.0.0.1:4444;
		server 127.0.0.1:5555;
		}

	upstream app1backend{
		server 127.0.0.1:2222;
		server 127.0.0.1:3333;
		}
	upstream app1backend{
		server 127.0.0.1:4444;
		server 127.0.0.1:5555;
		}
	server {

	listen 80;
        location / {
		proxy_pass http://allbackend/;
		 }
	location /app1{
		proxy_pass http://app1backend/;	
			}
	location /app2{
		proxy_pass http://app2backend/;	
			}
	location /admin {
			return 403;
			}

		}
      }
}



9. Nginx as a Layer 4 proxy:
============================

vi /etc/nginx/nginx.cfg

stream {

	upstream allbackend {
		server 127.0.0.1:2222;
		server 127.0.0.1:3333;
		server 127.0.0.1:4444;
		server 127.0.0.1:5555;
		}


	server {

	listen 80;
       	proxy_pass allbackend;
		 }

	}


$ telnet 127.0.0.1 80


10. Enable HTTPS on Nginx:
===========================

vi /etc/nginx/nginx.cfg

my.noip.com

sudo certbot certonly --standalone

letsencrypt.org


vi /etc/nginx/nginx.cfg

http {

	upstream allbackend {
		#ip_hash;
		server 127.0.0.1:2222;
		server 127.0.0.1:3333;
		server 127.0.0.1:4444;
		server 127.0.0.1:5555;
		}

	upstream app1backend{
		server 127.0.0.1:2222;
		server 127.0.0.1:3333;
		}
	upstream app1backend{
		server 127.0.0.1:4444;
		server 127.0.0.1:5555;
		}
	server {

	listen 80;
	listen 443 ssl;

	ssl_certificate /public.key
	ssl_certificate /private_key
        location / {
		proxy_pass http://allbackend/;
		 }
	location /app1{
		proxy_pass http://app1backend/;	
			}
	location /app2{
		proxy_pass http://app2backend/;	
			}
	location /admin {
			return 403;
			}

		}
      }
}

11. Enable TLS 1.3 on Nginx:
============================

vi /etc/nginx/nginx.cfg

http {

	upstream allbackend {
		#ip_hash;
		server 127.0.0.1:2222;
		server 127.0.0.1:3333;
		server 127.0.0.1:4444;
		server 127.0.0.1:5555;
		}

	upstream app1backend{
		server 127.0.0.1:2222;
		server 127.0.0.1:3333;
		}
	upstream app1backend{
		server 127.0.0.1:4444;
		server 127.0.0.1:5555;
		}
	server {

	listen 80;
	listen 443 ssl;

	ssl_certificate /public.key
	ssl_certificate /private_key

	ssl_protocols TLSv1.3;
	
        location / {
		proxy_pass http://allbackend/;
		 }
	location /app1{
		proxy_pass http://app1backend/;	
			}
	location /app2{
		proxy_pass http://app2backend/;	
			}
	location /admin {
			return 403;
			}

		}
      }
}



12. Enable HTTP/2 on nginx:
==========================


vi /etc/nginx/nginx.cfg

http {

	upstream allbackend {
		#ip_hash;
		server 127.0.0.1:2222;
		server 127.0.0.1:3333;
		server 127.0.0.1:4444;
		server 127.0.0.1:5555;
		}

	upstream app1backend{
		server 127.0.0.1:2222;
		server 127.0.0.1:3333;
		}
	upstream app1backend{
		server 127.0.0.1:4444;
		server 127.0.0.1:5555;
		}
	server {

	listen 80;
        location / {
		proxy_pass http://allbackend/;
		 }
	location /app1{
		proxy_pass http://app1backend/;	
			}
	location /app2{
		proxy_pass http://app2backend/;	
			}
	location /admin {
			return 403;
			}

		}
      }
}



9. Nginx as a Layer 4 proxy:
============================

vi /etc/nginx/nginx.cfg

stream {

	upstream allbackend {
		server 127.0.0.1:2222;
		server 127.0.0.1:3333;
		server 127.0.0.1:4444;
		server 127.0.0.1:5555;
		}


	server {

	listen 80;
       	proxy_pass allbackend;
		 }

	}


$ telnet 127.0.0.1 80


10. Enable HTTPS on Nginx:
===========================

vi /etc/nginx/nginx.cfg

my.noip.com

sudo certbot certonly --standalone

letsencrypt.org


vi /etc/nginx/nginx.cfg

http {

	upstream allbackend {
		#ip_hash;
		server 127.0.0.1:2222;
		server 127.0.0.1:3333;
		server 127.0.0.1:4444;
		server 127.0.0.1:5555;
		}

	upstream app1backend{
		server 127.0.0.1:2222;
		server 127.0.0.1:3333;
		}
	upstream app1backend{
		server 127.0.0.1:4444;
		server 127.0.0.1:5555;
		}
	server {

	listen 80;
	listen 443 ssl;

	ssl_certificate /public.key
	ssl_certificate /private_key
        location / {
		proxy_pass http://allbackend/;
		 }
	location /app1{
		proxy_pass http://app1backend/;	
			}
	location /app2{
		proxy_pass http://app2backend/;	
			}
	location /admin {
			return 403;
			}

		}
      }
}

11. Enable TLS 1.3 on Nginx:
============================

vi /etc/nginx/nginx.cfg

http {

	upstream allbackend {
		#ip_hash;
		server 127.0.0.1:2222;
		server 127.0.0.1:3333;
		server 127.0.0.1:4444;
		server 127.0.0.1:5555;
		}

	upstream app1backend{
		server 127.0.0.1:2222;
		server 127.0.0.1:3333;
		}
	upstream app1backend{
		server 127.0.0.1:4444;
		server 127.0.0.1:5555;
		}
	server {

	listen 80;
	listen 443 ssl http2;

	ssl_certificate /public.key
	ssl_certificate /private_key

	ssl_protocols TLSv1.3;
	
        location / {
		proxy_pass http://allbackend/;
		 }
	location /app1{
		proxy_pass http://app1backend/;	
			}
	location /app2{
		proxy_pass http://app2backend/;	
			}
	location /admin {
			return 403;
			}

		}
      }
}


13. Nginx in Docker:
====================

FROM node:12
WORKDIR /home/node/app
COPY app /home/node/app
RUN npm install
CMD npm run app
EXPOSE 9999

